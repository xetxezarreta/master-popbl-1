---
AWSTemplateFormatVersion: '2010-09-09'
Description: Despliegue de red para el PBL v1
Parameters:
  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName
    Default: popbl_key_ivaldes_saccount
  IAMRoleCW:
    Description: EC2 attached IAM role for CWLogs
    Type: String
    Default: CloudWatchLogRole
    ConstraintDescription: must be an existing IAM role which will be attached to EC2 instance.

Mappings:
  EC2RegionMap:
    us-east-1:
      pblbasicami: ami-062f7200baf2fa504
      AmazonLinuxNATAMIHVMEBSBacked64bit: ami-303b1458
Resources:  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PBL security group
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: PBL_sg
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: "-1"
      FromPort: "-1"
      ToPort: "-1"
      CidrIp: 0.0.0.0/0
      GroupId:
        Ref: SecurityGroup
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: "-1"
      FromPort: "-1"
      ToPort: "-1"
      CidrIp: 0.0.0.0/0
      GroupId:
        Ref: SecurityGroup
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: PBL_vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: PBL_igw
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  
    # Subnet PublicHoney
  
  # SubnetPublicHoney

  SubnetPublicHoney:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.11.0/24
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: PBL_subnet_honey
  RouteTablePublicHoney:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  RouteTableAssociationPublicHoney:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublicHoney
      RouteTableId:
        Ref: RouteTablePublicHoney
  RoutePublicHoneyToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePublicHoney
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicHoney:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
  SubnetNetworkAclAssociationPublicHoney:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublicHoney
      NetworkAclId:
        Ref: NetworkAclPublicHoney
  NetworkAclEntryInPublicHoneySSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicHoney
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryOutPublicHoneySSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicHoney
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      
  NetworkAclEntryInPublicHoneyEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicHoney
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicHoneyEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicHoney
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  HoneyServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M    
    Properties:
      IamInstanceProfile:
        Ref: IAMRoleCW   
      ImageId:
        Fn::FindInMap:
        - EC2RegionMap
        - Ref: AWS::Region
        - pblbasicami
      InstanceType: t2.micro
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetPublicHoney
        DeviceIndex: '0'
        PrivateIpAddress: '10.0.11.101'
        GroupSet:
        - Ref: SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          set -xe    
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          # Install software
          sudo yum update -y
          sudo yum install git -y
          sudo yum install -y docker
          sudo usermod -a -G docker ec2-user
          sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          service docker start
          # Deploy
          sysctl kernel.hostname=HoneyServer          
          pushd /home/ec2-user
          export AWS_STACKNAME=${AWS::StackName}
          export AWS_REGION=${AWS::Region}
          export AWS_RESOURCE=HoneyServer
          export HOST_IP=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
          git clone https://gitlab.danz.eus/ivan.valdesi/popbl_deployment_scripts.git
          cd popbl_deployment_scripts
          #CW LOGS
          sudo yum install -y awslogs
          cp awslogs.conf /etc/awslogs/awslogs.conf
          sudo systemctl start awslogsd
          # Deploy
          export LOGSTASH_HOST=10.0.21.101:9200
          ./deploy.sh honey         
          # ./deploy.sh sniffer
          popd
      Tags:
      - Key: Name
        Value: HoneyServer
      - Key: System
        Value: pblSystem
    DependsOn: VPCGatewayAttachment
  
  # Subnet Public App
  
  SubnetPublicApp:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.12.0/24
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: PBL_subnet_public_app
  RouteTablePublicApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  RouteTableAssociationPublicApp:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublicApp
      RouteTableId:
        Ref: RouteTablePublicApp
  RoutePublicAppToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePublicApp
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicApp:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
  SubnetNetworkAclAssociationPublicApp:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublicApp
      NetworkAclId:
        Ref: NetworkAclPublicApp
  NetworkAclEntryInPublicAppSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicAppSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPublicAppEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicAppEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryInPublicAppUDPConsul:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '501'
      Protocol: '17'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  
  NetworkAclEntryOutPublicAppUDPConsul:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '502'
      Protocol: '17'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
    
    
  BastionServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      IamInstanceProfile:
        Ref: IAMRoleCW    
      ImageId:
        Fn::FindInMap:
        - EC2RegionMap
        - Ref: AWS::Region
        - pblbasicami
      InstanceType: t2.micro
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetPublicApp
        DeviceIndex: '0'
        PrivateIpAddress: '10.0.12.101'
        GroupSet:
        - Ref: SecurityGroup
      Tags:
      - Key: Name
        Value: BastionServer
      - Key: System
        Value: pblSystem
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -xe    
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          # Install software
          sudo yum update -y
          sudo yum install git -y
          sudo yum install -y docker
          sudo usermod -a -G docker ec2-user
          sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          service docker start
          # Deploy
          sysctl kernel.hostname=BastionServer
          pushd /home/ec2-user
          export AWS_STACKNAME=${AWS::StackName}
          export AWS_REGION=${AWS::Region}
          export AWS_RESOURCE=BastionServer
          export CONSUL_HOST=10.0.22.101
          export HOST_IP=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
          git clone https://gitlab.danz.eus/ivan.valdesi/popbl_deployment_scripts.git
          cd popbl_deployment_scripts
          #CW LOGS
          sudo yum install -y awslogs
          cp awslogs.conf /etc/awslogs/awslogs.conf
          sudo systemctl start awslogsd
          ./deploy.sh haproxy
          export LOGSTASH_HOST=10.0.21.101:9200
          ./deploy.sh sniffer
          popd
    DependsOn: VPCGatewayAttachment
  
  # Nat
 
  NetworkAclEntryInPublicNATSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '101'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPublicNATEphemeralPorts: 
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '301'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicNATSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '101'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicNATEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublicApp
      RuleNumber: '301'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  NatServer:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: IAMRoleCW   
      SourceDestCheck: 'false'
      ImageId:
        Fn::FindInMap:
        - EC2RegionMap
        - Ref: AWS::Region
        - AmazonLinuxNATAMIHVMEBSBacked64bit
      InstanceType: t2.micro
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetPublicApp
        DeviceIndex: '0'
        PrivateIpAddress: '10.0.12.102'
        GroupSet:
        - Ref: SecurityGroup
      Tags:
      - Key: Name
        Value: NatServer
      - Key: System
        Value: pblSystem

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -xe
          sysctl kernel.hostname=NatServer
          # Add nat rule for consul to be public 
          sudo iptables -t nat -A PREROUTING -p tcp --dport 8500 -j DNAT --to-destination 10.0.22.101:8500
          # Add nat rule for consul to be public    
          sudo iptables -t nat -A PREROUTING -p tcp --dport 15671 -j DNAT --to-destination 10.0.22.101:15671        
          # Add nat rule for consul to be public    
          sudo iptables -t nat -A PREROUTING -p tcp --dport 5601 -j DNAT --to-destination 10.0.21.101:5601        
    DependsOn: VPCGatewayAttachment
  
  

  # Subnet PrivateML

  SubnetPrivateMl:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.21.0/24
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: PBL_subnet_ml
  RouteTablePrivateMl:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  RouteTableAssociationPrivateMl:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivateMl
      RouteTableId:
        Ref: RouteTablePrivateMl
  RoutePrivateMlToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePrivateMl
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: NatServer
    DependsOn: VPCGatewayAttachment
  NetworkAclPrivateMl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
  SubnetNetworkAclAssociationPrivateMl:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivateMl
      NetworkAclId:
        Ref: NetworkAclPrivateMl
  NetworkAclEntryInPrivateMlSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateMl
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPrivateMlSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateMl
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPrivateMlEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateMl
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPrivateMlEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateMl
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  MlServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      IamInstanceProfile:
        Ref: IAMRoleCW   
      ImageId:
        Fn::FindInMap:
        - EC2RegionMap
        - Ref: AWS::Region
        - pblbasicami
      InstanceType: t2.medium
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'false'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetPrivateMl
        DeviceIndex: '0'
        PrivateIpAddress: '10.0.21.101'
        GroupSet:
        - Ref: SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe   
          set -xe    
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          # Install software
          sudo yum update -y
          sudo yum install git -y
          sudo yum install -y docker
          sudo usermod -a -G docker ec2-user
          sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          service docker start
          # Deploy
          sysctl kernel.hostname=MlServer          
          pushd /home/ec2-user
          export AWS_STACKNAME=${AWS::StackName}
          export AWS_REGION=${AWS::Region}
          export AWS_RESOURCE=MlServer
          export HOST_IP=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
          git clone https://gitlab.danz.eus/ivan.valdesi/popbl_deployment_scripts.git
          cd popbl_deployment_scripts
          #CW LOGS
          sudo yum install -y awslogs
          cp awslogs.conf /etc/awslogs/awslogs.conf
          sudo systemctl start awslogsd
          # Deploy
          ./deploy.sh ml
          popd
      Tags:
      - Key: Name
        Value: MlServer
      - Key: System
        Value: pblSystem
    DependsOn: VPCGatewayAttachment
  
  # Subnet PrivateApp
  
  SubnetPrivateApp:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.22.0/24
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: PBL_subnet_private_app
  RouteTablePrivateApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  RouteTableAssociationPrivateApp:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivateApp
      RouteTableId:
        Ref: RouteTablePrivateApp
  RoutePrivateAppToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePrivateApp
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: NatServer
    DependsOn: VPCGatewayAttachment
  NetworkAclPrivateApp:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
  SubnetNetworkAclAssociationPrivateApp:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivateApp
      NetworkAclId:
        Ref: NetworkAclPrivateApp
  NetworkAclEntryInPrivateAppSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateApp
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPrivateAppSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateApp
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPrivateAppEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateApp
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPrivateAppEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateApp
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

 
  NetworkAclEntryInPrivateAppUDPConsul:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateApp
      RuleNumber: '501'
      Protocol: '17'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  
  NetworkAclEntryOutPrivateAppUDPConsul:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateApp
      RuleNumber: '502'
      Protocol: '17'
      PortRange:
        From: '0'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  AppPrivateServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M    
    Properties:
      IamInstanceProfile:
        Ref: IAMRoleCW   
      ImageId:
        Fn::FindInMap:
        - EC2RegionMap
        - Ref: AWS::Region
        - pblbasicami
      InstanceType: t2.medium
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'false'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetPrivateApp
        DeviceIndex: '0'
        PrivateIpAddress: '10.0.22.101'
        GroupSet:
        - Ref: SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          set -xe    
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          # Install software
          sudo yum update -y
          sudo yum install git -y
          sudo yum install -y docker
          sudo usermod -a -G docker ec2-user
          sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          service docker start
          # Install the vault
          sudo mkdir -p /opt/vault/directory
          sudo wget https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          unzip vault_1.2.3_linux_amd64.zip
          sudo chown root:root vault
          sudo mv vault /usr/local/bin/
          # Open the vault
          pushd /home/ec2-user
          git clone https://gitlab.danz.eus/alexander.tesouro/popbl_vault.git
          cd popbl_vault
          docker-compose -f vault/docker-compose.yml up -d
          vault operator unseal -tls-skip-verify oHqnnW37HP0g6DwomRO1nd7j9tjbzlyn5RPQ0fzGCIk=
          export VAULT_TOKEN=s.gdQIdY1VlWrwEakrSXuSjbUl
          popd
          
          # Deploy
          sysctl kernel.hostname=AppPrivateServer          
          pushd /home/ec2-user
          export AWS_STACKNAME=${AWS::StackName}
          export AWS_REGION=${AWS::Region}
          export AWS_RESOURCE=AppPrivateServer
          # Con esto funciona pero no entiendo porque con 10.0.22.101 no 
          export CONSUL_HOST=192.168.4.20
          export HOST_IP=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
          git clone https://gitlab.danz.eus/ivan.valdesi/popbl_deployment_scripts.git
          cd popbl_deployment_scripts
          #CW LOGS
          sudo yum install -y awslogs
          cp awslogs.conf /etc/awslogs/awslogs.conf
          sudo systemctl start awslogsd
          # Deploy
          ./deploy.sh app
          popd
      Tags:
      - Key: Name
        Value: AppPrivateServer
      - Key: System
        Value: pblSystem
    DependsOn: VPCGatewayAttachment
 
 
  
  
  
  
  
  
  
  
  